# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may  require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"
# ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting  this variable when ZSH_THEME=random will case zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITUVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN-INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_OPTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
plugins=(asdf git vi-mode web-search zsh-autosuggestions zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# User configuration

export TERM="xterm-256color"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
	export EDITOR="vim"
else
	export EDITOR="nvim"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# local bin
export PATH="$HOME/.local/bin:$PATH"

# nvm
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# autoload -U add-zsh-hook
# load-nvmrc() {
# 	local node_version="$(nvm version)"
# 	local nvmrc_path="$(nvm_find_nvmrc)"
# 	local node_version_path="$(pwd)/.node-version"
#
# 	if [ -n "$nvmrc_path" ]; then
# 		local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
#
# 		if [ "$nvmrc_node_version" = "N/A" ]; then
# 			nvm install
# 		elif [ "$nvmrc_node_version" != "$node_version" ]; then
# 			nvm use
# 		fi
# 	elif [ -f $node_version_path ]; then
# 		version="$(cat "$node_version_path")"
# 		nvm use $version
# 	elif [ "$node_version" != "$(nvm version default)" ]; then
# 		echo "Reverting to nvm default version"
# 		nvm use default
# 	fi
# }
# add-zsh-hook chpwd load-nvmrc
# load-nvmrc

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init --path)"
	eval "$(pyenv init -)"
fi

# vcpkg
export VCPKG_ROOT="$HOME/vcpkg"
export PATH="$VCPKG_ROOT:$PATH"
if [ -f $VCPKG_ROOT ]; then
	source $VCPKG_ROOT/scripts/vcpkg_completion.zsh
fi

# CMake
export CMAKE_GENERATOR="Ninja"
export CONAN_CMAKE_GENERATOR="Ninja"

if [[ $(uname) == "Darwin" ]]; then
	# use llvm and gcc from homebrew on mac
	export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
	export PATH="/opt/homebrew/opt/gcc/bin:$PATH"

	# local flutter repo
	export PATH="$HOME/Developer/tools/flutter/bin/:$PATH"

	alias apple-clang="/usr/bin/clang"
	alias apple-clang++="/usr/bin/clang++"
fi

alias cl="clear"
alias pg="ps -ef | grep"
alias pkill!="pkill -9 -f"

if [ -x "$(command -v eza)" ]; then
	alias ls="eza --icons --git"
	alias l="eza -l --icons --git -a"
	alias lt="eza --tree --level=2 --long --icons --git"

	cx() { cd "$@" && eza -l --icons --git -a; }

else
	cx() { cd "$@" && ll; }
fi

if [ -x "$(command -v bat)" ]; then
	alias cat="bat"
fi

if [ -x "$(command -v zoxide)" ]; then
	eval "$(zoxide init zsh)"
fi

if [ -x "$(command -v ranger)" ]; then

	function ranger() {
		local IFS=$'\t\n'
		local tempfile="$(mktemp -t tmp.XXXXXX)"
		local ranger_cmd=(
			command
			ranger
			--cmd="map Q chain shell echo %d > "$tempfile"; quitall"
		)

		${ranger_cmd[@]} "$@"
		if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n $(pwd))" ]]; then
			cd -- "$(cat "$tempfile")" || return
		fi
		command rm -f -- "$tempfile" 2>/dev/null
	}
	alias rr='ranger'
fi

if [ -d "$HOME/.cargo/env" ]; then
	source $HOME/.cargo/env
fi

bindkey -v

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

eval "$(starship init zsh)"
