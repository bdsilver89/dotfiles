# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  vi-mode
  command-not-found
  zsh-autosuggestions
  zsh-completions
  zsh-syntax-highlighting
  fzf-tab
)

source $ZSH/oh-my-zsh.sh

export EDITOR='nvim'
export PATH="$HOME/.local/bin:$PATH"
export DOTFILES_DIR=$HOME/dotfiles

if [ $(uname) = "Darwin" ]; then
  export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
fi

# # zinit setup
# ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
# if [ ! -d "$ZINIT_HOME" ]; then
#   mkdir -p "$(dirname $ZINIT_HOME)"
#   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
# fi
#
# # load zinit
# source "${ZINIT_HOME}/zinit.zsh"
#
# # load powerlevel 10k
# zinit ice depth=1; zinit light romkatv/powerlevel10k
#
# # zsh plugins
# zinit light zsh-users/zsh-syntax-highlighting
# zinit light zsh-users/zsh-completions
# zinit light zsh-users/zsh-autosuggestions
# zinit light Aloxaf/fzf-tab
#
# # snippts
# zinit snippet OMZP::git
# zinit snippet OMZP::sudo
# zinit snippet OMZP::command-not-found

# autoload completions
autoload -U compinit && compinit

# zinit cdreplay -q

# load p10k
[[ ! -f $DOTFILES_DIR/zsh/p10k.zsh ]] || source $DOTFILES_DIR/zsh/p10k.zsh

# keybindings
bindkey -v
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# history
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space # prepend with space to prevent history storing command
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors '"${(s.:.)LS_COLORS}'
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

# aliases
alias c="clear"
alias pg="ps -ef | grep"
alias pkill!="pkill -9 -f"

# eza/exa/ls
if [ -x "$(command -v eza)" ]; then
  # use eza
  alias ls="eza --color=always --icons=always --git"
  alias lt="eza --color=always --tree --level=2 --icons=always --long --git"
elif [ -x "$(command -v exa)" ]; then
  # use exa (deprecated, mostly for ubuntu)
  alias ls="exa --color=always"
  alias lt="exa --color=always --tree --level=2 --long"
else
  # fallback on ls
  alias ls="ls --color=auto"
fi
alias l="ls -lah"

# git
alias g="git"

if [ -x "$(command -v fzf)" ]; then
  # ubuntu runs an older version of fzf
  eval "$(fzf --bash &>/dev/null)"
fi

if [ -x "$(command -v zoxide)" ]; then
  eval "$(zoxide init bash)"
fi

# sometimes bat is installed as batcat
if [ -x "$(command -v batcat)" ]; then
  alias bat="batcat"
fi

# sometimes fd is installed as fdfind
if [ -x "$(command -v fdfind)" ]; then
  alias fd="fdfind"
fi

# nvm
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
if [ -d $PYENV_ROOT ]; then
  export PATH="$PYENV_ROOT/bin:$PATH"
  if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
  fi
fi

[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# cmake
export CMAKE_COLOR_DIAGNOSTICS="ON"
if [ -x "$(command -v ninja)" ]; then
  export CMAKE_GENERATOR="Ninja"
  export CONAN_CMAKE_GENERATOR="Ninja"
fi

# ninja
# export NINJA_STATUS=$(echo -e "\e[1;30m[\e[1;32m%s/%t \e[1;34m%p \e[1;36m%e\e[1;30m] \e[;0m")
export NINJA_STATUS=$(echo -e "[%f/%t %p %e]")

# vcpkg
export VCPKG_ROOT="$HOME/vcpkg"
if [ -d $VCPKG_ROOT ]; then
  export PATH="$VCPKG_ROOT:$PATH"
fi
