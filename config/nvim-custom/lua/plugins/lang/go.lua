return {
  -- {
  --   "nvim-treesitter/nvim-treesitter",
  --   opts = {
  --     ensure_installed = { "go", "gomod", "gowork", "gosum" },
  --   },
  -- },
  -- {
  --   "neovim/nvim-lspconfig",
  --   opts = {
  --     servers = {
  --       gopls = {
  --         settings = {
  --           gopls = {
  --             gofumpt = true,
  --             codelenses = {
  --               gc_details = false,
  --               generate = true,
  --               regenerate_cgo = true,
  --               run_govulncheck = true,
  --               test = true,
  --               tidy = true,
  --               upgrade_dependency = true,
  --               vendor = true,
  --             },
  --             hints = {
  --               assignVariableTypes = true,
  --               compositeLiteralFields = true,
  --               compositeLiteralTypes = true,
  --               constantValues = true,
  --               functionTypeParameters = true,
  --               parameterNames = true,
  --               rangeVariableTypes = true,
  --             },
  --             analyses = {
  --               fieldalignment = true,
  --               nilness = true,
  --               unusedparams = true,
  --               unusedwrite = true,
  --               useany = true,
  --             },
  --             usePlaceholders = true,
  --             completeUnimported = true,
  --             staticcheck = true,
  --             directoryFilters = { "-.git", "-.vscode", "-.idea", "-.vscode-test", "-node_modules" },
  --             semanticTokens = true,
  --           },
  --         },
  --       },
  --     },
  --     setup = {
  --       gopls = function(_, opts)
  --         callback = function(event)
  --           local client = vim.lsp.get_client_by_id(event.data.client_id)
  --           if client and (client.name == "gopls") then
  --             if not client.server_capabilities.semanticTokensProvider then
  --               local semantic = client.config.capabilities.textDocument.semanticTokens
  --               client.server_capabilities.semanticTokensProvider = {
  --                 full = true,
  --                 legend = {
  --                   tokenTypes = semantic.tokenTypes,
  --                   tokenModifiers = semantic.tokenModifiers,
  --                 },
  --                 range = true,
  --               }
  --             end
  --           end
  --         end
  --       end,
  --     },
  --   },
  -- },
  --
  -- {
  --   "williamboman/mason.nvim",
  --   opts = {
  --     ensure_installed = { "goimports", "gofumpt" },
  --   },
  -- },
  --
  -- {
  --   "stevearc/conform.nvim",
  --   opts = {
  --     formatters_by_ft = {
  --       go = { "goimports", "gofumpt" },
  --     },
  --   },
  -- },
  --
  -- {
  --   "mfussenegger/nvim-dap",
  --   dependencies = {
  --     {
  --       "williamboman/mason.nvim",
  --       opts = { ensure_installed = { "delve" } },
  --     },
  --     {
  --       "leoluz/nvim-dap-go",
  --       opts = {},
  --     },
  --   },
  -- },
  --
  -- {
  --   "nvim-neotest/neotest",
  --   dependencies = {
  --     "fredrikaverpil/neotest-golang",
  --   },
  --   opts = {
  --     adapters = {
  --       ["neotest-golang"] = {
  --         -- Here we can set options for neotest-golang, e.g.
  --         -- go_test_args = { "-v", "-race", "-count=1", "-timeout=60s" },
  --         dap_go_enabled = true, -- requires leoluz/nvim-dap-go
  --       },
  --     },
  --   },
  -- },
}
